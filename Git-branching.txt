Successful Git Branching Model

See http://nvie.com/posts/a-successful-git-branching-model/.

Have one central "truth" repository, origin. It is the central
push-pull location. 

There are two main branches:

  * master, consider origin/master to be the main branch where the
    source code of HEAD always reflects a production-ready state. 

  * develop, consider origin/develop to be the main branch where
    the source code of HEAD always reflects a state with the latest
    delivered development changes for the next release.  

When the source code in the develop branch reaches a stable point and
is ready to be released, all of the changes should be merged back into
master somehow and then tagged with a release number. 

Supporting Branches three different types, feature, release and
hotfix. Each has a specific purpose and are bound by strict rules
about originating and merge branches.

Feature Branches:

Feature branches are used to develop new features for the upcoming or
a distant future release.   

  * Branch from develop
    - git checkout -b myfeature develop

  * Merge to develop
    - git checkout develop		# Switch to develop
    - git merge --no-ff myfeature	# merge feature
    - git branch -d myfeature		# delete feature branch
    + integration testing
    - git push origin develop		# push to origin

Release Branches:

Release branches support preparation of a new production release. They
allow for last-minute dotting of i’s and crossing t’s. Furthermore,
they allow for minor bug fixes and preparing meta-data for a release
(version number, build dates, etc.). By doing all of this work on a
release branch, the develop branch is cleared to receive features for
the next big release. 

  * Branch from develop
    - git checkout -b release-1.2 develop
    + ./bump-version.sh 1.2		# update version info
      					# any bug fixes
					# turn off JavaScript Logging.
    - git commit -a -m "Bumped ver to 1.2"
					# commit changes

  * Merge to master
    - git checkout master		# switch to master
    - git merge --no-ff release-1.2	# merge release
    - git tag -a 1.2			# tag the master
      	      	 			# might want to use -s
  * Merge to develop
    - git checkout develop
    - git merge --no-ff release-1.2	# probably conflicts
      	  				# due to version change
					# fix and commit
    - git branch -d release-1.2		# delete release-1.2

Hotfix Branches:

Hotfix branches are very much like release branches in that they are
also meant to prepare for a new production release, albeit
unplanned. They arise from the necessity to act immediately upon an
undesired state of a live production version. 

  * Branch from master
    - git checkout -b hotfix-1.2.1 master
    + ./bump-version 1.2.1		# update version
    - git commit -a -m "Bumped version 1.2.1"
    + fix problem
    - git commit -a -m "Fixed severe production problem"

  * Merge to master
    - git checkout master
    - git merge --no-ff hotfix-1.2.1
    - git tag -a 1.2.1

  * Merge to develop unless there is a release branch.  If there is a
  release branch merge into it. The changes will be merged into
  develop when the release branch is completed.
    - git checkout develop
    - git merge --no-ff hotfix-1.2.1
    - git branch -d hotfix-1.2.1	# delete hotfix


  
